import threading
from flask import Flask, request, jsonify, redirect
from flask_cors import CORS
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TELEGRAM_TOKEN = "7377508266:AAHv1EKkXgP3AjVbcJHnaf505N-37HELKQw"
API_KEY        = "77777"
WEBHOOK_URL    = "https://emoshow-bot.onrender.com"
PORT           = 10000

app = Flask(__name__)
CORS(app)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

latest_command = {
    "text":      "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! EMO",
    "color":     "black",
    "bg":        "white",
    "size":      "60",
    "direction": "left",
    "speed":     "3"
}
waiting_text = {}

def menu_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    kb.add(KeyboardButton("–ú–µ–Ω—é"))
    return kb

def bg_keyboard():
    kb = InlineKeyboardMarkup(row_width=3)
    for emoji, val in [
        ("‚¨ú","white"),("‚¨õ","black"),("üü•","red"),
        ("üü¶","blue"),("üü©","green"),("üü®","yellow")
    ]:
        kb.add(InlineKeyboardButton(emoji, callback_data=f"setbg:{val}"))
    kb.add(
        InlineKeyboardButton("üé® –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", callback_data="show_text"),
        InlineKeyboardButton("üî† –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", callback_data="show_size"),
    )
    kb.add(InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"))
    kb.add(
        InlineKeyboardButton("üêá –°–∫–æ—Ä–æ—Å—Ç—å", callback_data="show_speed"),
        InlineKeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å", callback_data="set_fixed"),
        InlineKeyboardButton("‚ñ∂Ô∏è –ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞", callback_data="set_scroll"),
    )
    return kb

def text_keyboard():
    kb = InlineKeyboardMarkup(row_width=3)
    for emoji, val in [
        ("‚¨ú","white"),("‚¨õ","black"),("üü•","red"),
        ("üü¶","blue"),("üü©","green"),("üü®","yellow")
    ]:
        kb.add(InlineKeyboardButton(emoji, callback_data=f"setcolor:{val}"))
    return kb

def size_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    for name, val in [("60","60"),("80","80"),("100","100"),("120","120")]:
        kb.add(InlineKeyboardButton(name, callback_data=f"setsize:{val}"))
    return kb

def speed_keyboard():
    kb = InlineKeyboardMarkup(row_width=3)
    for name, val in [("üê¢1","1"),("2","2"),("3","3"),("4","4"),("‚ö°Ô∏è5","5")]:
        kb.add(InlineKeyboardButton(name, callback_data=f"setspeed:{val}"))
    return kb

@bot.message_handler(commands=['start'])
def on_start(msg):
    bot.send_message(
        msg.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        reply_markup=menu_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == "–ú–µ–Ω—é")
def show_menu(msg):
    bot.send_message(
        msg.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:",
        reply_markup=bg_keyboard()
    )

@bot.callback_query_handler(lambda c: c.data == "show_text")
def cb_show_text(c):
    bot.answer_callback_query(c.id)
    bot.send_message(
        c.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=text_keyboard()
    )

@bot.callback_query_handler(lambda c: c.data == "show_size")
def cb_show_size(c):
    bot.answer_callback_query(c.id)
    bot.send_message(
        c.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:",
        reply_markup=size_keyboard()
    )

@bot.callback_query_handler(lambda c: c.data == "show_speed")
def cb_show_speed(c):
    bot.answer_callback_query(c.id)
    bot.send_message(
        c.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å:",
        reply_markup=speed_keyboard()
    )

@bot.callback_query_handler(lambda c: c.data == "set_fixed")
def cb_set_fixed(c):
    latest_command["direction"] = "fixed"
    bot.answer_callback_query(c.id, "–¢–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –ø–æ —Ü–µ–Ω—Ç—Ä—É!")

@bot.callback_query_handler(lambda c: c.data == "set_scroll")
def cb_set_scroll(c):
    latest_command["direction"] = "left"
    bot.answer_callback_query(c.id, "–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏!")

@bot.callback_query_handler(lambda c: c.data == "show_bg")
def cb_show_bg(c):
    bot.answer_callback_query(c.id)
    bot.send_message(
        c.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞:",
        reply_markup=bg_keyboard()
    )

@bot.callback_query_handler(lambda c: c.data.startswith("setbg:"))
def cb_set_bg(c):
    latest_command["bg"] = c.data.split(":",1)[1]
    bot.answer_callback_query(c.id, "–§–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.callback_query_handler(lambda c: c.data.startswith("setcolor:"))
def cb_set_color(c):
    latest_command["color"] = c.data.split(":",1)[1]
    bot.answer_callback_query(c.id, "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.callback_query_handler(lambda c: c.data.startswith("setsize:"))
def cb_set_size(c):
    latest_command["size"] = c.data.split(":",1)[1]
    bot.answer_callback_query(c.id, "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.callback_query_handler(lambda c: c.data.startswith("setspeed:"))
def cb_set_speed(c):
    latest_command["speed"] = c.data.split(":",1)[1]
    bot.answer_callback_query(c.id, "–°–∫–æ—Ä–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@bot.callback_query_handler(lambda c: c.data == "edit_text")
def cb_edit_text(c):
    waiting_text[c.from_user.id] = True
    bot.answer_callback_query(c.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
    bot.send_message(
        c.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫):"
    )

@bot.message_handler(func=lambda m: waiting_text.get(m.from_user.id, False))
def handle_new_text(m):
    latest_command["text"] = m.text
    waiting_text[m.from_user.id] = False
    bot.reply_to(
        m,
        "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ —É—á—Ç–µ–Ω—ã.",
        reply_markup=menu_keyboard()
    )

@bot.message_handler(func=lambda m: True)
def fallback(m):
    txt = m.text.strip()
    up = txt.upper()
    if up.startswith("–¢–ï–ö–°–¢:"):
        latest_command["text"] = txt[6:].strip()
        bot.reply_to(m, "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=menu_keyboard())
    elif up.startswith("–§–û–ù:"):
        latest_command["bg"] = txt[4:].strip()
        bot.reply_to(m, "–§–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=menu_keyboard())
    elif up.startswith("–¶–í–ï–¢:"):
        latest_command["color"] = txt[5:].strip()
        bot.reply_to(m, "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=menu_keyboard())
    elif up.startswith("–†–ê–ó–ú–ï–†:"):
        try:
            latest_command["size"] = str(int(txt[7:].strip()))
            bot.reply_to(m, "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=menu_keyboard())
        except:
            bot.reply_to(m, "–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=menu_keyboard())
    else:
        bot.reply_to(
            m,
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "–¢–ï–ö–°–¢: ..., –§–û–ù: ..., –¶–í–ï–¢: ..., –†–ê–ó–ú–ï–†: ...",
            reply_markup=menu_keyboard()
        )

@app.route('/')
def root():
    return redirect("https://daniyars1703.github.io/emoshow-bot/")

@app.route('/api/latest', methods=['GET'])
def api_latest():
    if request.args.get('apikey') != API_KEY:
        return jsonify({"error": "unauthorized"}), 403
    return jsonify(latest_command)

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def telegram_webhook():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}")
    app.run(host='0.0.0.0', port=PORT)
