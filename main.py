import threading
from flask import Flask, request, jsonify, redirect
from flask_cors import CORS
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TELEGRAM_TOKEN = "7377508266:AAHv1EKkXgP3AjVbcJHnaf505N-37HELKQw"
API_KEY        = "77777"
WEBHOOK_URL    = "https://emoshow-bot.onrender.com"
PORT           = 10000

app = Flask(__name__)
CORS(app)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

latest_command = {
    "text":      "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! EMO",
    "color":     "black",
    "bg":        "white",
    "size":      "70",
    "direction": "left",
    "speed":     "3"
}
waiting_text = {}

CATEGORIES = ["bg", "color", "size", "speed", "text"]
CATEGORY_TITLES = {
    "bg": "–¶–≤–µ—Ç —Ñ–æ–Ω–∞",
    "color": "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞",
    "size": "–†–∞–∑–º–µ—Ä",
    "speed": "–°–∫–æ—Ä–æ—Å—Ç—å",
    "text": "–¢–ï–ö–°–¢"
}

def menu_inline_keyboard(active="bg"):
    kb = InlineKeyboardMarkup(row_width=3)
    for cat in CATEGORIES:
        title = CATEGORY_TITLES[cat]
        if cat == active:
            text = f"‚ñ† {title.upper()} ‚ñ†"
        else:
            text = title
        callback = "edit_text" if cat == "text" else f"show_{cat}"
        kb.add(InlineKeyboardButton(text, callback_data=callback))
    return kb

def bg_color_keyboard(current_bg):
    colors = [
        ("‚¨ú", "white"), ("‚¨õ", "black"), ("üü•", "red"),
        ("üü¶", "blue"), ("üü©", "green"), ("üü®", "yellow"),
        ("üüß", "orange"), ("üü™", "purple"), ("üü´", "brown")
    ]
    kb = InlineKeyboardMarkup(row_width=3)
    btns = []
    for emoji, val in colors:
        text = f"{emoji}‚úÖ" if val == current_bg else emoji
        btns.append(InlineKeyboardButton(text, callback_data=f"setbg:{val}"))
    for i in range(0, len(btns), 3):
        kb.row(*btns[i:i+3])
    return kb

def text_color_keyboard(current_color):
    colors = [
        ("‚ö™", "white"), ("‚ö´", "black"), ("üî¥", "red"),
        ("üîµ", "blue"), ("üü¢", "green"), ("üü°", "yellow"),
        ("üü†", "orange"), ("üü£", "purple"), ("üü§", "brown")
    ]
    kb = InlineKeyboardMarkup(row_width=3)
    btns = []
    for emoji, val in colors:
        text = f"{emoji}‚úÖ" if val == current_color else emoji
        btns.append(InlineKeyboardButton(text, callback_data=f"setcolor:{val}"))
    for i in range(0, len(btns), 3):
        kb.row(*btns[i:i+3])
    return kb

def size_keyboard(current_size):
    sizes = [("70", "70"), ("80", "80"), ("90", "90"),
             ("100", "100"), ("110", "110"), ("120", "120")]
    kb = InlineKeyboardMarkup(row_width=3)
    btns = []
    for name, val in sizes:
        text = f"{name}‚úÖ" if val == current_size else name
        btns.append(InlineKeyboardButton(text, callback_data=f"setsize:{val}"))
    for i in range(0, len(btns), 3):
        kb.row(*btns[i:i+3])
    return kb

def speed_keyboard(current_speed):
    speeds = [
        ("üê¢1", "1"), ("2", "2"), ("3", "3"),
        ("4", "4"), ("5", "5"), ("6", "6"),
        ("7", "7"), ("8", "8"), ("‚ö°Ô∏è9", "9")
    ]
    kb = InlineKeyboardMarkup(row_width=3)
    btns = []
    for name, val in speeds:
        text = f"{name}‚úÖ" if val == current_speed else name
        btns.append(InlineKeyboardButton(text, callback_data=f"setspeed:{val}"))
    for i in range(0, len(btns), 3):
        kb.row(*btns[i:i+3])
    return kb

def direction_keyboard(current_direction):
    options = [
        ("üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å", "fixed"),
        ("‚ñ∂Ô∏è –ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞", "left"),
        ("üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥", "pingpong")
    ]
    kb = InlineKeyboardMarkup(row_width=3)
    for title, value in options:
        text = f"{title}‚úÖ" if value == current_direction else title
        kb.add(InlineKeyboardButton(text, callback_data=f"setdirection:{value}"))
    return kb

def settings_keyboard(category):
    kb = menu_inline_keyboard(active=category)
    if category == "bg":
        for row in bg_color_keyboard(latest_command["bg"]).keyboard:
            kb.keyboard.append(row)
    elif category == "color":
        for row in text_color_keyboard(latest_command["color"]).keyboard:
            kb.keyboard.append(row)
    elif category == "size":
        for row in size_keyboard(latest_command["size"]).keyboard:
            kb.keyboard.append(row)
    elif category == "speed":
        for row in speed_keyboard(latest_command["speed"]).keyboard:
            kb.keyboard.append(row)
    if category in ["bg", "color", "size", "speed"]:
        for row in direction_keyboard(latest_command["direction"]).keyboard:
            kb.keyboard.append(row)
    return kb

@bot.message_handler(commands=['start'])
def on_start(msg):
    bot.send_message(
        msg.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–µ–≥—É—â—É—é —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ú–µ–Ω—é"))
    )

@bot.message_handler(func=lambda m: m.text == "–ú–µ–Ω—é")
def show_main_menu(msg):
    bot.send_message(
        msg.chat.id,
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏:",
        reply_markup=settings_keyboard("bg")
    )

@bot.callback_query_handler(lambda c: c.data.startswith("show_"))
def menu_nav_callback(c):
    cat = c.data[5:]
    kb = settings_keyboard(cat)
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=kb)
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(lambda c: c.data == "edit_text")
def cb_edit_text(c):
    waiting_text[c.from_user.id] = True
    bot.answer_callback_query(c.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
    bot.send_message(
        c.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫):"
    )

@bot.callback_query_handler(lambda c: c.data.startswith("setbg:"))
def cb_set_bg(c):
    latest_command["bg"] = c.data.split(":",1)[1]
    kb = settings_keyboard("bg")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=kb)
    bot.answer_callback_query(c.id, "–§–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.callback_query_handler(lambda c: c.data.startswith("setcolor:"))
def cb_set_color(c):
    latest_command["color"] = c.data.split(":",1)[1]
    kb = settings_keyboard("color")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=kb)
    bot.answer_callback_query(c.id, "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.callback_query_handler(lambda c: c.data.startswith("setsize:"))
def cb_set_size(c):
    latest_command["size"] = c.data.split(":",1)[1]
    kb = settings_keyboard("size")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=kb)
    bot.answer_callback_query(c.id, "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.callback_query_handler(lambda c: c.data.startswith("setspeed:"))
def cb_set_speed(c):
    latest_command["speed"] = c.data.split(":",1)[1]
    kb = settings_keyboard("speed")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=kb)
    bot.answer_callback_query(c.id, "–°–∫–æ—Ä–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@bot.callback_query_handler(lambda c: c.data.startswith("setdirection:"))
def cb_set_direction(c):
    latest_command["direction"] = c.data.split(":",1)[1]
    kb = settings_keyboard("bg")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=kb)
    bot.answer_callback_query(c.id, "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.message_handler(func=lambda m: waiting_text.get(m.from_user.id, False))
def handle_new_text(m):
    latest_command["text"] = m.text
    waiting_text[m.from_user.id] = False
    bot.reply_to(
        m,
        "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ —É—á—Ç–µ–Ω—ã.",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ú–µ–Ω—é"))
    )

@bot.message_handler(func=lambda m: True)
def fallback(m):
    txt = m.text.strip()
    up = txt.upper()
    if up.startswith("–¢–ï–ö–°–¢:"):
        latest_command["text"] = txt[6:].strip()
        bot.reply_to(m, "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ú–µ–Ω—é")))
    elif up.startswith("–§–û–ù:"):
        latest_command["bg"] = txt[4:].strip()
        bot.reply_to(m, "–§–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ú–µ–Ω—é")))
    elif up.startswith("–¶–í–ï–¢:"):
        latest_command["color"] = txt[5:].strip()
        bot.reply_to(m, "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ú–µ–Ω—é")))
    elif up.startswith("–†–ê–ó–ú–ï–†:"):
        try:
            latest_command["size"] = str(int(txt[7:].strip()))
            bot.reply_to(m, "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ú–µ–Ω—é")))
        except:
            bot.reply_to(m, "–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ú–µ–Ω—é")))
    else:
        bot.reply_to(
            m,
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "–¢–ï–ö–°–¢: ..., –§–û–ù: ..., –¶–í–ï–¢: ..., –†–ê–ó–ú–ï–†: ...",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ú–µ–Ω—é"))
        )

@app.route('/')
def root():
    return redirect("https://daniyars1703.github.io/emoshow-bot/")

@app.route('/api/latest', methods=['GET'])
def api_latest():
    if request.args.get('apikey') != API_KEY:
        return jsonify({"error": "unauthorized"}), 403
    return jsonify(latest_command)

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def telegram_webhook():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return '', 200

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}")
    app.run(host='0.0.0.0', port=PORT)
