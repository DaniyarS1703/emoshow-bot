import os
from flask import Flask, request, jsonify, send_from_directory
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from flask_cors import CORS

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN", "–¢–í–û–ô_–¢–û–ö–ï–ù_–û–¢_BOTFATHER")
API_KEY = os.environ.get("API_KEY", "77777")

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS-–∑–∞–ø—Ä–æ—Å—ã

bot = telebot.TeleBot(TELEGRAM_TOKEN)
latest_command = {
    "text": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! EMO",
    "color": "black",
    "bg": "white",
    "size": "60",
    "direction": "left",
    "speed": "3"
}
waiting_text = {}

# –¶–≤–µ—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

bg_colors = [
    ("‚¨ú", "white"),
    ("‚¨õ", "black"),
    ("üü•", "red"),
    ("üü¶", "blue"),
    ("üü©", "green"),
    ("üü®", "yellow"),
    ("üüß", "orange"),
    ("üü™", "purple"),
    ("üü´", "brown")
]

text_colors = [
    ("‚ö™", "white"),
    ("‚ö´", "black"),
    ("üî¥", "red"),
    ("üîµ", "blue"),
    ("üü¢", "green"),
    ("üü°", "yellow"),
    ("üü†", "orange"),
    ("üü£", "purple"),
    ("üü§", "brown")
]

sizes = [
    ("60", "60"),
    ("80", "80"),
    ("100", "100"),
    ("120", "120")
]

speed_options = [
    ("üê¢ 1", "1"),
    ("2", "2"),
    ("3", "3"),
    ("4", "4"),
    ("5", "5"),
    ("‚ö°Ô∏è 6", "6")
]

direction_options = [
    ("‚¨ÖÔ∏è", "left"),
    ("‚û°Ô∏è", "right")
]

def menu_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üé® –ú–µ–Ω—é"))
    return markup

def bg_keyboard():
    markup = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(emoji, callback_data=f"setbg:{color}") for emoji, color in bg_colors]
    for i in range(0, 9, 3):
        markup.add(*buttons[i:i+3])
    markup.add(
        InlineKeyboardButton("–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", callback_data="show_text_colors"),
        InlineKeyboardButton("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", callback_data="show_sizes"),
    )
    markup.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"),
    )
    markup.add(
        InlineKeyboardButton("–°–∫–æ—Ä–æ—Å—Ç—å", callback_data="show_speed"),
        InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="show_direction")
    )
    return markup

def text_color_keyboard():
    markup = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(emoji, callback_data=f"setcolor:{color}") for emoji, color in text_colors]
    for i in range(0, 9, 3):
        markup.add(*buttons[i:i+3])
    markup.add(
        InlineKeyboardButton("–¶–≤–µ—Ç —Ñ–æ–Ω–∞", callback_data="show_bg"),
        InlineKeyboardButton("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", callback_data="show_sizes"),
    )
    markup.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"),
    )
    markup.add(
        InlineKeyboardButton("–°–∫–æ—Ä–æ—Å—Ç—å", callback_data="show_speed"),
        InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="show_direction")
    )
    return markup

def size_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(name, callback_data=f"setsize:{size}") for name, size in sizes]
    markup.add(*buttons)
    markup.add(
        InlineKeyboardButton("–¶–≤–µ—Ç —Ñ–æ–Ω–∞", callback_data="show_bg"),
        InlineKeyboardButton("–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", callback_data="show_text_colors"),
    )
    markup.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"),
    )
    markup.add(
        InlineKeyboardButton("–°–∫–æ—Ä–æ—Å—Ç—å", callback_data="show_speed"),
        InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="show_direction")
    )
    return markup

def speed_keyboard():
    markup = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(name, callback_data=f"setspeed:{value}") for name, value in speed_options]
    for i in range(0, 6, 3):
        markup.add(*buttons[i:i+3])
    return markup

def direction_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(name, callback_data=f"setdirection:{value}") for name, value in direction_options]
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£–ø—Ä–∞–≤–ª—è–π –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ üé® –ú–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=menu_keyboard())

@bot.message_handler(func=lambda message: message.text == "üé® –ú–µ–Ω—é")
def show_main_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=bg_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("setbg:"))
def callback_set_bg(call):
    color = call.data.split(":")[1]
    latest_command["bg"] = color
    bot.answer_callback_query(call.id, text=f"–§–æ–Ω —Å–º–µ–Ω—ë–Ω!")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, f"–§–æ–Ω —Å–º–µ–Ω—ë–Ω!", reply_markup=menu_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("setcolor:"))
def callback_set_color(call):
    color = call.data.split(":")[1]
    latest_command["color"] = color
    bot.answer_callback_query(call.id, text=f"–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: {color}")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, f"–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=menu_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("setsize:"))
def callback_set_size(call):
    size = call.data.split(":")[1]
    latest_command["size"] = size
    bot.answer_callback_query(call.id, text=f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {size}")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {size}", reply_markup=menu_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "edit_text")
def callback_edit_text(call):
    waiting_text[call.from_user.id] = True
    bot.answer_callback_query(call.id, text="–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏:")

@bot.callback_query_handler(func=lambda call: call.data == "show_text_colors")
def show_text_colors(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=text_color_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "show_bg")
def show_bg_colors(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=bg_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "show_sizes")
def show_sizes(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=size_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "show_speed")
def show_speed(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=speed_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "show_direction")
def show_direction(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=direction_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("setspeed:"))
def callback_set_speed(call):
    speed = call.data.split(":")[1]
    latest_command["speed"] = speed
    bot.answer_callback_query(call.id, text=f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed}")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, f"–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è: {speed}", reply_markup=menu_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("setdirection:"))
def callback_set_direction(call):
    direction = call.data.split(":")[1]
    latest_command["direction"] = direction
    bot.answer_callback_query(call.id, text=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {('–í–ª–µ–≤–æ' if direction=='left' else '–í–ø—Ä–∞–≤–æ')}")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {('‚¨ÖÔ∏è –í–ª–µ–≤–æ' if direction=='left' else '‚û°Ô∏è –í–ø—Ä–∞–≤–æ')}", reply_markup=menu_keyboard())

@bot.message_handler(func=lambda m: True)
def handle_all(message):
    global latest_command
    if waiting_text.get(message.from_user.id, False):
        latest_command["text"] = message.text.strip()
        waiting_text[message.from_user.id] = False
        bot.reply_to(message, "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")
    else:
        text = message.text.strip()
        if text.upper().startswith("–¢–ï–ö–°–¢:"):
            latest_command["text"] = text[6:].strip()
            bot.reply_to(message, "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")
        elif text.upper().startswith("–¶–í–ï–¢:"):
            latest_command["color"] = text[5:].strip()
            bot.reply_to(message, "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        elif text.upper().startswith("–§–û–ù:"):
            latest_command["bg"] = text[4:].strip()
            bot.reply_to(message, "–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        elif text.upper().startswith("–†–ê–ó–ú–ï–†:"):
            try:
                latest_command["size"] = str(int(text[7:].strip()))
                bot.reply_to(message, "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")
            except Exception:
                bot.reply_to(message, "–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        else:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ üé® –ú–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n–¢–ï–ö–°–¢: ...\n–¶–í–ï–¢: ...\n–§–û–ù: ...\n–†–ê–ó–ú–ï–†: ...")

@app.route('/api/latest', methods=['GET'])
def api_latest():
    apikey = request.args.get("apikey")
    if apikey != API_KEY:
        return jsonify({"error": "unauthorized"}), 403
    return jsonify(latest_command)

@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

if __name__ == '__main__':
    import threading
    threading.Thread(target=bot.polling, daemon=True).start()
    app.run(host="0.0.0.0", port=10000)
